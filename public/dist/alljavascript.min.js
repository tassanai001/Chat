var app={};!function(){app=angular.module("MainApp",["ngRoute","ngSanitize","ngResource","ngAnimate","mgcrea.ngStrap","firebase"]),app.config(["$routeProvider","$locationProvider",function(e,n){n.html5Mode(!1).hashPrefix("!"),e.when("/",{templateUrl:"/views/index.html",controller:"mainCtrl"}).when("/sample",{templateUrl:"/views/sample/sample.html",controller:"sampleCtrl"}).otherwise({redirectTo:"/"}).when("/scrub",{templateUrl:"/views/ScrubDomain/scrubdomain.html",controller:"scrubCtrl"}).otherwise({redirectTo:"/"})}])}();var spinner={},token="XXX";!function(){toastr.options={closeButton:!1,debug:!1,progressBar:!1,positionClass:"toast-bottom-right",onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};var e={lines:11,length:23,width:8,radius:40,corners:1,rotate:9,color:"#FFF",speed:1,trail:50,shadow:!1,hwaccel:!0,zIndex:2e9,top:"50%",left:"50%"},n=null;spinner.show=function(){var t=document.getElementById("spinner");null==n?n=new Spinner(e).spin(t):n.spin(t),$.blockUI({message:null,overlayCSS:{backgroundColor:"#5c5c5c"}})},spinner.hide=function(){var e=document.getElementById("spinner");n.stop(e),$.unblockUI()}}(),function(){app.controller("globalCtrl",["$scope",function(e){e.pageData=[{Name:"Home"},{Name:"Sample"}],e.directiveTest="HELLO WORLD"}])}(),function(){app.directive("directiveSample",function(){return{restrict:"AEC",replace:!0,require:"ngModel",scope:!0,link:function(e,n,t,r){r.$render=function(){n.empty(),n.append(r.$viewValue)}}}})}(),function(){Date.prototype.addHours=function(e){return this.setHours(this.getHours()+e),this},app.filter("DateTrick",function(){return function(e){if(null!==e){var n=e.addHours(7);return n}return{}}})}(),function(){app.controller("mainCtrl",["$scope","$firebaseObject","$firebaseArray","$firebaseAuth","mainService","searchEngineService",function(e,n,t,r,a,o){e.activePage=1,e.text=[],e.message="",e.initMT=function(){var n={apiKey:"AIzaSyAbClNhb0PEnFUvx7ViemGcOB268uRaNq8",authDomain:"chat-f9c5e.firebaseapp.com",databaseURL:"https://chat-f9c5e.firebaseio.com",storageBucket:"chat-f9c5e.appspot.com",messagingSenderId:"303533600371"};firebase.initializeApp(n),e.ref=firebase.database().ref().child("chat-f9c5e"),e.list=t(e.ref),e.list.$loaded().then(function(n){console.log("Meaasge:",n),e.message=n})["catch"](function(e){console.log("Error:",e)})},e.SubmitKeyword=function(){o.addKeyword({keywords:e.inputkeywords}).then(function(e){console.log(e)})},e.Submit=function(n){e.list.$add({message:n}).then(function(e){console.log("values: ",e)})}}])}(),function(){app.factory("mainService",["$http","$q",function(e,n){var t={};return t.GetSample=function(){spinner.show();var t=n.defer();return e({method:"GET",url:"/"}).success(function(e){spinner.hide(),t.resolve(e)}).error(function(e){spinner.hide(),t.reject(e)}),t.promise},t}])}(),function(){app.controller("sampleCtrl",["$scope","$modal","sampleService",function(e,n,t){e.activePage=2,e.readSampleData=[],e.createSample=function(){t.createSample().then(function(n){"ERROR"!=n?(toastr.success("การบันทึกสำเร็จ","การบันทึกข้อมูล"),e.readSampleData.push(n)):toastr.warning("การบันทึกผิดพลาด"+n,"การบันทึกข้อมูล")})},e.createNewSample=function(){t.createNewSample(e.modalData).then(function(n){"ERROR"!=n?(toastr.success("การบันทึกสำเร็จ","การบันทึกข้อมูล"),e.readSampleData.push(n)):toastr.warning("การปรับปรุงผิดพลาด"+n,"การปรับปรุงผิดพลาด")})},e.modalData={},e.read=function(e,n){t.readSample(e).then(function(e){n(e)})},e.readAllSample=function(){t.readAllSample().then(function(n){"ERROR"!=n?e.readSampleData=n:toastr.warning("การอ่านข้อมูลผิดพลาด"+n,"การอ่านข้อมูลผิดพลาด")})},e.updateSample=function(){var n=e.currentID,r=e.currentIndex;t.updateSample(e.modalData,n).then(function(n){"ERROR"!=n?e.readSampleData[r]=e.modalData:toastr.warning("การปรับปรุงผิดพลาด"+n,"การปรับปรุงผิดพลาด")})},e.deleteConfirm=function(t,r){e.currentID=t,e.currentIndex=r,n({scope:e,template:"/views/sample/modal/sampleConfirm.html",show:!0})},e.deleteSample=function(){var n=e.currentID,r=e.currentIndex;t.deleteSample(n).then(function(n){"ERROR"!=n?e.readSampleData.splice(r,1):toastr.warning("การลบผิดพลาด"+n,"การลบผิดพลาด")})},e.checkData=function(){switch(e.modalMode){case"create":e.createNewSample();break;case"edit":e.updateSample()}},e.showSample=function(t,r,a){e.modalMode=t,e.currentID=r,e.currentIndex=a;var o=n({scope:e,template:"/views/sample/modal/sampleModal.html",show:!1});switch(t){case"create":e.modalData={},e.modalData.readOnly=!1,o.$promise.then(o.show);break;case"show":e.read(r,function(n){"ERROR"!=n?(o.$promise.then(o.show),e.modalData=n,e.modalData.bCreate=JSON.parse(n.bCreate),e.modalData.readOnly=!0):toastr.warning("การอ่านข้อมูลผิดพลาด"+n,"การอ่านข้อมูลผิดพลาด")});break;case"edit":e.read(r,function(n){"ERROR"!=n?(o.$promise.then(o.show),e.modalData=n,e.modalData.bCreate=JSON.parse(n.bCreate),e.modalData.readOnly=!1):toastr.warning("การอ่านข้อมูลผิดพลาด"+n,"การอ่านข้อมูลผิดพลาด")})}}}])}(),function(){app.factory("sampleService",["$http","$q",function(e,n){var t={};return t.createSample=function(){spinner.show();var t=n.defer();return e({method:"GET",url:"/sample/create",contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),t.resolve(e)}).error(function(e){spinner.hide(),t.reject(e)}),t.promise},t.createNewSample=function(t){spinner.show();var r=n.defer();return e({method:"POST",url:"/sample/createnew",contentType:"application/json; charset=utf-8",data:{Name:t.Name,bCreate:t.bCreate},dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},t.readAllSample=function(){spinner.show();var t=n.defer();return e({method:"GET",url:"/sample/read",contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),t.resolve(e)}).error(function(e){spinner.hide(),t.reject(e)}),t.promise},t.deleteSample=function(t){spinner.show();var r=n.defer();return e({method:"GET",url:"/sample/delete/"+t,contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},t.readSample=function(t){spinner.show();var r=n.defer();return e({method:"GET",url:"/sample/read/"+t,contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},t.updateSample=function(t,r){spinner.show();var a=n.defer();return e({method:"POST",url:"/sample/update/"+r,data:{Name:t.Name,bCreate:t.bCreate},contentType:"application/json; charset=utf-8",dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),a.resolve(e)}).error(function(e){spinner.hide(),a.reject(e)}),a.promise},t}])}(),function(){app.controller("scrubCtrl",["$scope","$modal","scrubService",function(e,n,t){e.Scrub={},e.setScrubDomain=function(){var e="C:/Users/itpbiw/Desktop/ScrubFile/scrubExport.txt";t.setScrubDomain(e).then(function(e){console.log(e)})}}])}(),function(){app.factory("scrubService",["$http","$q",function(e,n){var t={};return t.setScrubDomain=function(t){spinner.show();var r=n.defer();return e({method:"POST",url:"/scrub/setScrubDomain",contentType:"application/json; charset=utf-8",data:{filepath:t},dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},t}])}(),function(){app.factory("searchEngineService",["$http","$q",function(e,n){var t={};return t.addKeyword=function(t){spinner.show();var r=n.defer();return console.log(t),e({method:"POST",url:"/searchengine/addKeyword",contentType:"application/json; charset=utf-8",data:t,dataType:"json",headers:{RequestVerificationToken:token}}).success(function(e){spinner.hide(),r.resolve(e)}).error(function(e){spinner.hide(),r.reject(e)}),r.promise},t}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
